package xyz.will.textcraft;import xyz.will.textcraft.command.HelpCommand;import xyz.will.textcraft.entity.Player;/** * Class Game *  * author: Will Franzen * version: 1.0 * date: Dec 2014 *  * This class acts a wrapper for all elements of the game. It contains the main method and * instantiates all needed objects when the play() method is called. *  * Game description: *  * This is a 3 dimensional open world text adventure game. The player can move freely around * the world, modifying it as (s)he sees fit. The win condition of the game is finding diamonds, * but the majority of the gameplay is focused around building. * * Challenge tasks/Special features: *  * - 3 dimensional world * - Modular command system using inheritance and reflection * - 6 different items where the player can have multiple of any item * - Chaining multiple commands together to be run at once with the 'then' pseudo-command * - Dynamic world */public class Game {	// Static reference to itself    private static Game instance;    // The Parser, World, and Player    private Parser parser;    private World world;    private Player player;        // The commands waiting to be executed after the use of the qasi-command 'then' keyword    private String queuedCommand;    // Create the game and instantiate variables    public Game()     {    	// Set up static reference    	instance = this;    	    	// Instantiate variables    	world = new World();    	parser = new Parser();    	    	// Create player in the center of the world    	player = new Player(world, new Location(world.getSize()/2, world.getHeight()/2, world.getSize()/2), Direction.EAST);    	world.addEntity(player);    	    	// Print the help message    	new HelpCommand("").run();    }    // Main game loop that goes on forever. The game is quit using System.exit(1)    public void play()     {                                    while (true) {        	String cmdString;        	        	// If there is a command queued, run that. Otherwise, wait for a new command        	if(queuedCommand != null) {        		cmdString = queuedCommand;        		queuedCommand = null;        	} else {        		cmdString = parser.getCommand();        	}                    	// Parse a raw input string to a Command object, then call the run method on it        	parser.parseCommand(cmdString).run();        }    }        // Add a command string to the queue    public void queueCommand(String command) {    	queuedCommand = command;    }        // Main method, creates a new game and runs the play method on it    public static void main(String[] args) {    	new Game().play();    }        // Gets an instance of the Game class    public static Game getInstance() {    	return instance;    }        // Gets an instance of the world    public World getWorld() {    	return world;    }        // Gets an instance of the parser    public Parser getParser() {    	return parser;    }        // Gets an instance of the player    public Player getPlayer() {    	return player;    }    }