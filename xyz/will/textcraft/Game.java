package xyz.will.textcraft;import xyz.will.textcraft.command.Command;import xyz.will.textcraft.command.HelpCommand;import xyz.will.textcraft.entity.Player;/** * Class Game - the main class of the "Zork" game. * * Author:  Michael Kolling * Version: 1.1 * Date:    March 2000 *  *  This class is the main class of the "Zork" application. Zork is a very *  simple, text based adventure game.  Users can walk around some scenery. *  That's all. It should really be extended to make it more interesting! *  *  To play this game, create an instance of this class and call the "play" *  routine. *  *  This main class creates and initialises all the others: it creates all *  rooms, creates the parser and starts the game.  It also evaluates the *  commands that the parser returns. */public class Game {    private static Game instance;    private Parser parser;    private World world;    private Player player;    /**     * Create the game and initialise its internal map.     */    public Game()     {    	instance = this;    	world = new World();    	parser = new Parser();    	player = new Player(world, new Location(world.getSize()/2, world.getHeight()/2, world.getSize()/2), Direction.EAST);    	world.addEntity(player);    	    	new HelpCommand("").run();    }    /**     *  Main play routine.  Loops until end of play.     */    public void play()     {                                    while (true) {            Command command = parser.getCommand();            processCommand(command);            if(hasWon())            	break;        }    }        private boolean hasWon() {    	if(player.getInventory().get(BlockType.DIAMOND) == null)    		return false;    	if(player.getInventory().get(BlockType.DIAMOND) > 0)    		return true;    	return false;    }        /**     * Given a command, process (that is: execute) the command.     * If this command ends the game, true is returned, otherwise false is     * returned.     */    private boolean processCommand(Command command)     {        if(command.isUnknown())        	StringUtil.print("Unknown command.");        else        	command.run();                return false;    }        public static void main(String[] args) {    	new Game().play();    }        public static Game getInstance() {    	return instance;    }        public World getWorld() {    	return world;    }        public Parser getParser() {    	return parser;    }        public Player getPlayer() {    	return player;    }    }