package xyz.will.textcraft;/* * Author:  Michael Kolling * Version: 1.0 * Date:    July 1999 *  * This class is part of Zork. Zork is a simple, text based adventure game. * * This parser reads user input and tries to interpret it as a "Zork" * command. Every time it is called it reads a line from the terminal and * tries to interpret the line as a two word command. It returns the command * as an object of class Command. * * The parser has a set of known command words. It checks user input against * the known commands, and if the input is not one of the known commands, it * returns a command object that is marked as an unknown command. */import java.io.BufferedReader;import java.io.InputStreamReader;import java.lang.reflect.Constructor;import java.util.HashMap;import java.util.StringTokenizer;import xyz.will.textcraft.command.*;public class Parser {    private HashMap<String, Class<? extends Command>> commands;  // holds all valid command words    public Parser()     {    	loadCommands();    }    public Command getCommand()     {        String inputLine = "";   // will hold the full input line        String word1 = null;        String word2 = null;        System.out.print("> ");     // print prompt        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));                try {            inputLine = reader.readLine();        } catch(java.io.IOException exc) { System.out.println ("There was an error during reading: " + exc.getMessage()); }        StringTokenizer tokenizer = new StringTokenizer(inputLine);                if(tokenizer.hasMoreTokens())        	word1 = tokenizer.nextToken();        if(tokenizer.hasMoreTokens())        	word2 = tokenizer.nextToken();        try {        	Class<? extends Command> cmdClazz = commands.get(word1);        	Constructor<? extends Command> con = cmdClazz.getDeclaredConstructor(String.class);        	con.setAccessible(true);        	return (Command) con.newInstance(word2);        } catch (Exception e) {            return new UnknownCommand(word2);        }    }        private void loadCommands() {    	commands = new HashMap<String, Class<? extends Command>>();    	    	commands.put("walk",   WalkCommand.class);    	commands.put("run",   RunCommand.class);    	commands.put("help", HelpCommand.class);    	commands.put("quit", QuitCommand.class);    	commands.put("coords", CoordsCommand.class);    	commands.put("jump", JumpCommand.class);    	commands.put("dig", DigCommand.class);    	commands.put("stuff", StuffCommand.class);    	commands.put("look", LookCommand.class);    	commands.put("rick", RickrollCommand.class);    }        public String[] getCommandWords() {    	return commands.keySet().toArray(new String[commands.size()]);    }        }