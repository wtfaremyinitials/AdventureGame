package xyz.will.textcraft;/* * Author:  Michael Kolling * Version: 1.0 * Date:    July 1999 *  * This class is part of Zork. Zork is a simple, text based adventure game. * * This parser reads user input and tries to interpret it as a "Zork" * command. Every time it is called it reads a line from the terminal and * tries to interpret the line as a two word command. It returns the command * as an object of class Command. * * The parser has a set of known command words. It checks user input against * the known commands, and if the input is not one of the known commands, it * returns a command object that is marked as an unknown command. */import java.io.BufferedReader;import java.io.InputStreamReader;import java.lang.reflect.Constructor;import java.util.ArrayList;import java.util.HashMap;import java.util.StringTokenizer;import xyz.will.textcraft.command.Command;import xyz.will.textcraft.command.CoordsCommand;import xyz.will.textcraft.command.DigCommand;import xyz.will.textcraft.command.HelpCommand;import xyz.will.textcraft.command.JumpCommand;import xyz.will.textcraft.command.LookCommand;import xyz.will.textcraft.command.PlaceCommand;import xyz.will.textcraft.command.QuitCommand;import xyz.will.textcraft.command.RickrollCommand;import xyz.will.textcraft.command.RunCommand;import xyz.will.textcraft.command.SelectCommand;import xyz.will.textcraft.command.StuffCommand;import xyz.will.textcraft.command.UnknownCommand;import xyz.will.textcraft.command.WalkCommand;public class Parser {    private HashMap<String, Class<? extends Command>> commands;  // holds all valid command words    public Parser()     {    	loadCommands();    }    public String getCommand()     {        String inputLine = "";   // will hold the full input line        ArrayList<String> words = new ArrayList<String>();        System.out.print("> ");     // print prompt        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));                try {            inputLine = reader.readLine();        } catch(java.io.IOException exc) { System.out.println ("There was an error during reading: " + exc.getMessage()); }        return inputLine;    }        public Command parseCommand(String cmd) {    	StringTokenizer tokenizer = new StringTokenizer(cmd);                String word1 = null;        String word2 = null;                ArrayList<String> theRest = new ArrayList<String>();                Constructor<? extends Command> con;        Command command = null;                       if(tokenizer.hasMoreTokens())        	word1 = tokenizer.nextToken();        if(tokenizer.hasMoreTokens())        	word2 = tokenizer.nextToken();                if(word2 != null && word2.equalsIgnoreCase("then")) {        	word2 = null;        	theRest.add("then");        }                while(tokenizer.hasMoreTokens())        	theRest.add(tokenizer.nextToken());                try {			Class<? extends Command> cmdClazz = commands.get(word1);			con = cmdClazz.getDeclaredConstructor(String.class);        	con.setAccessible(true);		} catch(Exception e) {			try {				con = UnknownCommand.class.getDeclaredConstructor(String.class);			} catch(Exception e2) { con = null; /* This will never happen */ }		}        try {        	command = con.newInstance(word2);        } catch(Exception e) { /* This will never happen either */ }                        if(theRest.size() > 0 && theRest.get(0).equalsIgnoreCase("then"))        	theRest.remove(0);                if(theRest.size() > 0)        	Game.getInstance().queueCommand(StringUtil.join(" ", theRest.toArray(new String[theRest.size()])));                return command;    }        private void loadCommands() {    	commands = new HashMap<String, Class<? extends Command>>();    	    	commands.put("walk",   WalkCommand.class);    	commands.put("run",    RunCommand.class);    	commands.put("help",   HelpCommand.class);    	commands.put("quit",   QuitCommand.class);    	commands.put("coords", CoordsCommand.class);    	commands.put("jump",   JumpCommand.class);    	commands.put("dig",    DigCommand.class);    	commands.put("stuff",  StuffCommand.class);    	commands.put("look",   LookCommand.class);    	commands.put("rick",   RickrollCommand.class);    	commands.put("place",  PlaceCommand.class);    	commands.put("select", SelectCommand.class);    }        public String[] getCommandWords() {    	return commands.keySet().toArray(new String[commands.size()]);    }        }